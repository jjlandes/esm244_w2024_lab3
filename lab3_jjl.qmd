---
title: "ESM244_lab3_part1_workingwspatialdata"
author: "Jesse Landesman"
format: 
  html:
    code-fold: show
    toc: true
    number-sections: true
    embed-resources: true
editor: visual
execute:
  echo: true
  message: false
  warning: false
---

```{r setup}
library(tidyverse)
library(here)
library(broom)

#spatial packages
library(sf)
library(tmap)
```

## Read in our data

```{r}
ca_counties_raw_sf <- read_sf(here('data', 'ca_counties', 'CA_Counties_TIGER2016.shp'))

ca_counties_sf <- ca_counties_raw_sf %>% 
  janitor::clean_names() %>% 
  mutate(land_km2 = aland / 1e6) %>% 
  select(county = name, land_km2)

ca_counties_df <- ca_counties_sf %>% 
  as.data.frame() %>% 
  select(-geometry)
```

## check the CRS

```{r}
ca_counties_sf %>% st_crs()
ca_counties_sf %>% terra::crs()
```

## explore it visually

```{r}
plot(ca_counties_sf %>% select(land_km2))
```

```{r}
ggplot()+
  geom_sf(data = ca_counties_sf, aes(fill = land_km2), color = 'white', size = 0.1)+
  theme_void()+
  scale_fill_gradientn(colors = c('cyan', 'blue', 'purple'))

# theme void gets rid of lat/lon
```

## read in some sesbania records

```{r}
sesbania_sf <- read_sf(here('data','red_sesbania', 'ds80_for_lab.gpkg')) %>% 
  janitor::clean_names()

sesbania_sf %>% st_crs()

# these two datasets on in different coordinate reference systems

plot(sesbania_sf %>% select(id))
```

## The analysis:

Let's find the count of red sesbania observed locations in this dataset, by county, and then create a map of all CA counties using the fill color to indicate sesbania counts.

### Pseudocode:
- if you could get both datasets into the same CRS, you can locate which county or multipolygon each point falls into
- %in% to figure out which counties the locations are located in
- summarize the total number of sesbanias per county and create the hue based on this

## Transform the CRS so records match counties

```{r}
sesbania_3857_sf <- st_transform(sesbania_sf, 3857)
sesbania_3857_2_sf <- st_transform(sesbania_sf, st_crs(ca_counties_sf))
```

## Let's plot the two together

```{r}
ggplot()+
  geom_sf(data = ca_counties_sf)+
  geom_sf(data = sesbania_3857_sf, size = 1, color = 'red')
```

## Spatial join!

```{r}
ca_sesb_sf <- st_join(ca_counties_sf, sesbania_3857_sf)

sesb_ca_sf <- st_join(sesbania_3857_sf, ca_counties_sf)
```


## Summarize by county

Choropleth

```{r}
sesb_counts_sf <- ca_sesb_sf %>% 
  group_by(county) %>% 
  summarize(n_records = sum(!is.na(id)))

ggplot() +
  geom_sf(data = sesb_counts_sf, aes(fill = n_records), color = 'grey90', size = 1) +
  scale_fill_gradientn(colors = c('lightgrey', 'red', 'purple')) +
  theme_minimal() +
  labs(fill = 'Number of S. punicia records')
  
  
```

## Next analysis

For the county with the greatest number of red sesbania records, make a map of those locations and where they occur within the county.

## Pseudocode:

select county == Solano
filter by just that county
plot the entire map or just the county of interest

```{r}
county_max <- sesb_counts_sf %>% 
  filter(n_records == max(n_records)) %>% 
  pull(county)

solano_sesb_sf <- sesb_ca_sf %>% 
  filter(county %in% county_max)

solano_sf <- ca_counties_sf %>% 
  filter(county %in% county_max)

ggplot() +
  geom_sf(data = solano_sf) +
  geom_sf(data = solano_sesb_sf, color = 'red')
```

# Making an interactive map with 'tmap'

```{r}
#| eval: false
#| include: true


### set the viewing mode to interactive
tmap_mode(mode = 'view')

tm_shape(ca_counties_sf) +
  tm_fill("land_km2", palette = 'BuGn') +
  tm_shape(sesbania_sf) +
  tm_dots()
```










